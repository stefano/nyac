(__load "build-arc/basic-fns.arc.so")
(__load "build-arc/basic-macs.arc.so")
(__load "build-arc/lib.arc.so")
(__load "build-arc/print.arc.so")
(__load "build-arc/read.arc.so")
(__load "build-arc/comp-utils.arc.so")
(__load "build-arc/code-walker.arc.so")
(__load "build-arc/transformations.arc.so")
(__load "build-arc/comp.arc.so")

(def test args
  (feach (fn (x) 
           (withs (to-test (car x)
                   expected (cadr x)
                   res (eval to-test))
             (if (not (iso res expected))
               (err (make-string "Test " to-test " failed, expected " expected
                                 " , got " res))
               (print (make-string "Test " to-test " succeded")))))
         args)
  (print (make-string "Successfully completed " (len args) " tests."))
  t)

(test
'(10 10) 
'(-1 -1) 
;'(-536870912 -536870912) 
;'(536870911 536870911) 
'(#\a #\a) 
'(#\Newline #\Newline) 
'(t t) 
'(nil nil) 
'(nil nil) 
'((fxadd1 10) 11) 
'((fxadd1 -1) 0) 
'((fxadd1 9000) 9001) 
'((fxadd1 (fxadd1 (fxadd1 0))) 3) 
'((fxsub1 10) 9) 
'((fx+ 7 8) 15) 
'((fx+ 5 (fx+ (fx+ 1 2) 87)) 95) 
'((fx+ 9 (__if t 1 2)) 10) 
'((fx+ 128 0) 128) 
'((fx+ (fxsub1 87) 4) 90) 
'((fx- 0 1) -1) 
'((fx- 5312 5312) 0) 
'((fx- 9 (fx- 3 4)) 10) 
'((fx- (fx- 100 2) (fx+ 3 7)) 88) 
'((fx* 0 2) 0) 
'((fx* 10 20) 200) 
'((fx* 1 1) 1) 
'((fx* (fx* 5 6) (fx+ 4 5)) 270) 
'((fx* -78 93) -7254) 
'((fx/ 9 3) 3)
'((fx/ 57 25) 2) 
'((fx/ (fxsub1 -99) (fx* 5 5)) -4) 
'((fx/ (fx/ 77 7) 4) 2) 
'((fxrem -190 78) -34) 
'((fxrem 9087 (fx* 9 -87)) 474) 
'((fxrem 90 1) 0) 
'((fxrem 0 56) 0) 
'((fxlogand 0 0) 0) 
'((fxlogand 90 90) 90) 
'((fxlogand 10 2) 2) 
'((fxlogand 786 9063) 770) 
'((fxlogand (fxlogand 8 9) (fxlogand 9000 800)) 0)
'((fxlogor 0 0) 0) 
'((fxlogor 90 90) 90) 
'((fxlogor 10 2) 10) 
'((fxlogor 786 9063) 9079) 
'((fxlogor (fxlogor 8 9) (fxlogand 9000 800)) 809)
'((fx= 0 0) t) 
'((fx= 1 0) nil) 
'((fx= -9 9) nil) 
'((fx= 78 77) nil) 
'((fx= 3 (fx/ 12 4)) t) 
'((fx= (fx- 0 907) (fxsub1 -906)) t) 
'((fx< 0 -9) nil) 
'((fx< -9 -8) t) 
'((fx< 9 9) nil) 
'((fx< (fxsub1 43) 43) t) 
'((fx<= 9 9) t) 
'((fx<= 7 8) t) 
'((fx<= 8 -8) nil) 
'((fx<= 67 6) nil) 
'((fx> 9 9) nil) 
'((fx> 7 8) nil) 
'((fx> 8 -8) t) 
'((fx> 67 6) t) 
'((fx>= 9 9) t) 
'((fx>= 7 8) nil) 
'((fx>= 8 -8) t) 
'((fx>= 67 6) t) 
'((ch= #\a #\a) t) 
'((ch= #\A #\a) nil) 
'((ch= #\Null #\Newline) nil) 
'((ch< #\a #\b) t) 
'((ch< #\b #\a) nil) 
'((ch> #\a #\b) nil) 
'((ch> #\b #\a) t) 
'((ch<= #\a #\b) t) 
'((ch<= #\a #\a) t) 
'((ch<= #\b #\a) nil) 
'((ch>= #\a #\b) nil) 
'((ch>= #\a #\a) t) 
'((ch>= #\b #\a) t) 
'((__let ((x 90) (y 1)) (fx+ x y)) 91) 
'((__let (a b) (and (is nil a) (is nil b))) t) 
'((__let (a b) a) nil) 
'((__let ((a 9) b) b) nil) 
'((__let ((a 8)) (fx+ a (__let ((b 5) (c 6)) (fx- b (fxadd1 c))))) 6) 
'((__let ((a (__if t 8 9)) (b 10)) (fx* (fx+ a 5) b)) 130) 
'((__let ((z 4) (a (__let ((b 5) (c 6)) (__if (fx< b c) b c))) (b 6))
   (fx+ z (fx+ a b)))
  15) 
'((__let ((x 1) (y 2)) (__let ((x (fx+ x y))) (fxadd1 x))) 4) 
'((__let nil (fx+ 9 8)) 17) 
'((__let ((x 2) (y 3)) (fx+ x y)) 5) 
'((__let ((x 1)) (__let ((x 4) (z x)) z)) 1) 
'((__let* ((x 90) (y 1)) (fx+ x y)) 91) 
'((__let* (a b) a) nil) 
'((__let* ((a 9) b) b) nil) 
'((__let* ((a 8)) (fx+ a (__let* ((b 5) (c 6)) (fx- b (fxadd1 c))))) 6) 
'((__let* ((a (__if t 8 9)) (b 10)) (fx* (fx+ a 5) b)) 130) 
'((__let* ((z 4) (a (__let* ((b 5) (c 6)) (__if (fx< b c) b c))) (b 6))
   (fx+ z (fx+ a b)))
  15) 
'((__let* ((x 1) (y 2)) (__let* ((x (fx+ x y))) (fxadd1 x))) 4) 
'((__let* nil (fx+ 9 8)) 17) 
'((__let* ((x 2) (y x)) (fx+ x y)) 4) 
'((__let ((x 1)) (__let ((x 4) (z x)) z)) 1) 
;'((labels ((- (code (a b) () (fx- a b))
;             ))
;    (labelcall - 10 2))
;  8) 
;'((labels ((sum2n
;               (code (n acc) ()
;                (__if (fx= n 0) acc
;                 (labelcall sum2n (fxsub1 n) (fx+ acc 2))))
;             ))
;    (labelcall sum2n 10 0))
;  20) 
;'((labels ((1+ (code (n) () (fxadd1 n))
;             )
;           (f (code (a b) () (fx- a (labelcall 1+ b)))
;             ))
;    (labelcall f 8 (fx* 2 3)))
;  1) 
;'((labels ((fib
;               (code (n) ()
;                (__if (fx< n 2) 1
;                 (fx+ (labelcall fib (fxsub1 n))
;                  (labelcall fib (fx- n 2)))))
;             ))
;    (labelcall fib 32))
;  3524578) 
;'((labels ((f (code (x) () (__let ((x 1)) (fx+ x x)))
;             ))
;    (__let ((x 5)) (labelcall f 7)))
;  2) 
;'((labels ((f (code (x) () (__let ((y 1)) (fx+ x y)))
;             ))
;    (__let ((x 5)) (labelcall f 8)))
;  9) 
;'((labels ((f (code (x) () (__let ((y 1)) (fx+ x y)))
;             ))
;    (__let ((x 5)) (labelcall f x)))
;  6) 
'((do (def f (n) (__if (fx= n 0) (g n) (f (fxsub1 n)))) (def g (n) (fx+ n 9)) (f 100000)) 9) 
'((do (def fast-fib (n1 n2 left)
        (__if (fxzerop left) n1 (fast-fib n2 (fx+ n1 n2) (fxsub1 left))))
      (fast-fib 1 1 32)) 3524578) 
'((do (def f (n) (__if (fxzerop n) 1 (g (fxsub1 n))))
      (def g (n) (__if (fxzerop n) 2 (f (fxsub1 n)))) 
      (f 5000001)) 2) 
'((__let ((a 5) (b 7)) (__let ((g (__fn (x) (fx+ x a)))) (g (fxsub1 b))))
  11) 
'((__let ((a 7) (c 3))
   (__let ((a (__fn (g x) (fx- (fx+ (g a) 8) x))) (b (__fn (a) (fx+ a c))))
    (a b 5)))
  13) 
'((__let ((z 1)) (__let ((f (__fn (x y) (__if (fx= x 0) z (y (fxsub1 x) y)))))
   (f 5000000 f)))
  1)
'((car nil) nil) 
'((cdr nil) nil) 
'((car (cdr (cdr (car (cdr nil))))) nil) 
'((car (cons 1 nil)) 1) 
'((cdr (cons 1 nil)) nil) 
'((consp (cons 1 2)) t) 
'((consp 1) nil) 
'((consp #\a) nil) 
'((consp t) nil) 
'((consp nil) nil) 
'((car (cdr (cons 1 (cons (fx+ 1 1) nil)))) 2) 
'((car (cons 1 (cons 2 nil))) 1) 
'((do (def build (n) (__if (fxzerop n) nil (cons n (build (fxsub1 n)))))
      (def t-last (l) (__if (not (cdr l)) (car l) (t-last (cdr l))))
      (t-last (build 100))) 1) 
'((__let ((a (cons 1 2)))
   (do (setcar
        a
        #\b)
       (car a)))
  #\b) 
'((__let ((a (cons 7 8)))
   (do (setcdr
        a
        0)
       (cdr a)))
  0) 
'((setcar (cons 3 4) 9) 9) 
'((__let ((v (mkvec 10 nil))) (vec-set v 2 76)) 76) 
'((__let ((v (mkvec 10 nil)))
   (__let ((v1 (vec-set v 2 3))) (vec-ref v 2)))
  3) 
'((__let ((v (mkvec 11 nil)) (v2 (mkvec 22 nil)))
   (__let ((a (vec-set v 10 8))) (vec-len v2)))
  22) 
'((cdr (vec-ref (mkvec 5 (cons 1 2)) 3)) 2) 
'((__let ((s (mkstr 10))) (str-set s 9 #\a)) #\a) 
'((__let ((s (mkstr 10)))
   (__let ((c1 (str-set s 0 #\b))) (str-ref s 0)))
  #\b) 
'((__let ((s1 (mkstr 11)) (s2 (mkstr 33)))
   (__let ((c (str-set s1 10 #\z))) (str-len s2)))
  33) 
'((strp 9) nil) 
'((strp "abc") t) 
'((strp 'a) nil) 
'((strp (mkstr 0)) t) 
'((do (def a (cons 1 nil))
      (def b 2) 
      (fx+ (car a) b)) 3) 
'((do (def a (mkvec 10 nil))
      (vec-set a 0 #\G) (vec-ref a 0)) #\G) 
'((do (def a nil) a) nil) 
'((do (def a 0) (set a 1) a) 1) 
'((do (def a 0) (set a 1)) 1) 
'((__let ((a #\A)) (set a (char->fx a))) 65) 
'((__let ((a 5))
   (do (__let
        ((a 9))
        (set a 7))
       a))
  5) 
'((__let ((a 0)) (set a nil)) nil) 
'((str-ref (string #\a #\b #\c) 2) #\c) 
'((str-ref (string #\a #\b) 0) #\a) 
'((fx= (str-len (string #\a #\c #\Null)) 3) t) 
'((vec-ref (vector 1 2 #\c 0) 2) #\c) 
'((vec-len (vector 1 2 3 4 5)) 5) 
'((vec-ref (vector nil t 8) 0) nil) 
'((str-ref (get-symbol-string (mksymbol "hello")) 1) #\e) 
'((__let ((s (mksymbol "hello")))
   (do (set-symbol-value
        s
        5)
       (fx+ (get-symbol-value s) 6)))
  11) 
'((symbolp (mksymbol "")) t) 
'((symbolp 8) nil) 
'((__let ((s (mksymbol "hi")))
   (do (set-symbol-plist
        s
        8)
       (get-symbol-plist s)))
  8) 
'((do (def mkf (x) (cons (__fn (y) (set x y)) (__fn nil x)))
      (__let ((f (mkf 4))) (fx+ ((car f) 6) ((cdr f))))) 12) 
'((__let ((x 0) (y 1)) (do ((__fn nil (set x y))) x)) 1) 
'((is #\a #\a) t) 
'((is (is 66 #\b) nil) t) 
'((is (fx->char 66) #\B) t) 
'((is (cons 1 nil) (cons 1 nil)) nil) 
'((do (def f () '(1 2)) (is (f) (f))) t) 
'((do (def f nil "hello") (is (f) (f))) t) 
'((__let ((a #(5 6 7))) (vec-ref a 1)) 6) 
'((is (vec-ref #(0 1 9) 2) 9) t) 
'(((__let ((a 9)) (__fn (x) (fx+ x a))) 6) 15) 
'((fnp 9) nil) 
'((fnp (__fn nil 0)) t) 
'((fnp '(__fn nil 0)) nil) 
'((do (__let
       ((a 2))
       (def f (x) (fx- x a)))
      (f 9))
  7) 
'((__let ((a 's1) (b 's1)) (is a b)) t) 
'((is 'a 'a) t) 
'((str-ref (get-symbol-string 'abc) 1) #\b) 
'((do (set-symbol-value
       (quote x)
       6)
      (set-symbol-value 'y 8)
    (fx+ (get-symbol-value 'x) (get-symbol-value 'y)))
  14) 
'((if nil unbound-error (fx< 8 0) this-too 'otherwise) otherwise)
'((do (def f (h) (if (fx= h 0) 0 (fx< h 0) -2 (fx> h 0) 3))
      (fx+ (f -7) (f 56))) 1) 
'((do (def f (h) (if (fx= h 0) 0 (fx< h 0) -2 (fx> h 0) 3))
      (f 0)) 0)
'(((__fn rest (fx+ (car rest) (car (cdr rest)))) 8 -1) 7)
'((do (def f (a . b) (cons a b)) (f (cons 1 2) (cons 2 3))) ((1 . 2) (2 . 3)))
'((let a
    0
    (set a 9)
    a)
  9) 
'((let a
    5
    (let b
      7
      (fx+ a b)))
  12) 
'(((__fn (a)
    (let a
      #\a
      a))
   9)
  #\a) 
'((with (a 0 b 5) (with (c 7 b -9) (set b -1) (fx+ a b))) -1) 
'((with (a 1 b 2) (cons a b)) (1 . 2)) 
'((with (a #\a b #\b)
   (if (fx= 0 0)
       (let b
         #\c
         b)
       a))
  #\c) 
'((let a
    8
    (withs (a 9 b a) (fx- a b)))
  0) 
'((withs (a 0 b (fxadd1 a) c (cons a b)) (set a 7) c) (0 . 1)) 
'(8.9642 8.9642) 
;'(-0.00067 -0.00067) 
'((vec-ref (car (cdr (cdr '(8 9 #(4 -5.7 0.0))))) 2) 0.0)
'((flp "a") nil) 
'((flp 9.0) t) 
'((flp 8) nil) 
'((flp 0.0) t) 
'((flp 0) nil) 
'((fl= 9.8 9.8) t) 
'((fl= 9.8 0.8) nil) 
;'((fl= 1.e-17 0.1) nil) 
'((fl= (fl+ 0.0 0.5) 0.5) t) 
'((fl< -9.8 9.8) t) 
'((fl< -7.8 -5.6098) t) 
;'((fl< (fl+ 0.7 1.e-21) 0.7) nil) 
'((fl< 9.8 9.8) nil) 
'((fl< 0.78 0.005) nil) 
'((fl<= 9.8 9.8) t) 
'((fl<= 0.9 5.673) t) 
'((fl<= 12.3 0.05) nil) 
'((fl<= 0.4 0.3999) nil) 
'((fl<= 0.3 -0.3) nil) 
'((fl> 0.3 0.3) nil) 
'((fl> 0.9 -100.0) t) 
'((fl> -5.6 0.0) nil) 
'((fl> -6.7 -90.0) t) 
'((not (fl>= 0.7 0.7)) nil) 
'((fl>= 0.9 -0.87) t) 
'((fl>= -4.5 4.5) nil) 
'((__if (fl>= 7.8 7.77) (fl>= -7.8 -7.99)) t) 
(list '(fl+ 8.9 7.6) (fl+ 8.9 7.6)) 
'((fl+ 0.0 -1.0) -1.0) 
;(list '(fl+ 1.e-18 1.e-18) (fl+ 1.e-18 1.e-18)) 
(list '(fl+ (fl+ 6.7 -4.3) 0.5) (fl+ (fl+ 6.7 -4.3) 0.5)) 
'((fl+ -6.7 (fl+ 0.0 1.0)) -5.7) 
(list '(__let ((a 8.9))
         (fl+ a 0.1))
  (fl+ 8.9 0.1))
(list '(fl- 0.8 0.7) (fl- 0.8 0.7)) 
'((fl- 0.5 0.5) 0.0) 
(list '(__let ((a (fl- 0.4 -0.6)))
         (fl- a 10.0))
  (fl- (fl- 0.4 -0.6) 10.0)) 
'((fl- -8.0 7.8) -15.8) 
'((fl* 0.0 -0.92365) -0.0) 
'((fl* 1.0 -1.0) -1.0) 
'((fl* 2.0 -2.0) -4.0) 
'((fl* (fl* 1.0 9.0) 9.0) 81.0) 
'((fl* (fl/ 1.7 9.0) 9.0) 1.7) 
'((fl/ 0.0 56.789) 0.0) 
'((fl/ 2.34 -1.0) -2.34) 
'((fl/ 4.0 2.0) 2.0) 
'((round 1.0) 1) 
'((round 10.5) 10) 
'((round -0.0) 0) 
'((round -11.6) -12) 
'((round (fl+ 10.7 0.2)) 11) 
'((fx->fl 0) 0.0) 
'((fx->fl 543) 543.0) 
'((fx->fl (round 5.6)) 6.0) 
'((fx->fl -89) -89.0))
